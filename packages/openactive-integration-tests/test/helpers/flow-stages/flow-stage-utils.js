const chakram = require('chakram');
const faker = require('faker');
const { last } = require('lodash');
const sharedValidationTests = require('../../shared-behaviours/validation');
const { generateUuid } = require('../generate-uuid');
const RequestHelper = require('../request-helper');
const { getSellerConfigWithTaxMode } = require('../sellers');
const { BookRecipe } = require('./book-recipe');
const { FlowStageRun } = require('./flow-stage-run');

/**
 * @typedef {import('chakram').ChakramResponse} ChakramResponse
 * @typedef {import('../../helpers/logger').BaseLoggerType} BaseLoggerType
 * @typedef {import('../../helpers/request-helper').RequestHelperType} RequestHelperType
 * @typedef {import('../../shared-behaviours/validation').ValidationMode} ValidationMode
 * @typedef {import('../../types/OpportunityCriteria').OpportunityCriteria} OpportunityCriteria
 * @typedef {import('./flow-stage').FlowStageOutput} FlowStageOutput
 *
 * @typedef {import('./flow-stage').FlowStageType<unknown, unknown>} UnknownFlowStageType
 * @typedef {import('./flow-stage').FlowStageType<
 *   unknown,
 *   Required<Pick<FlowStageOutput, 'httpResponse'>>,
 * >} FlowStageTypeWithHttpResponseOutput
 * @typedef {import('./flow-stage-run').AnyFlowStageRun} AnyFlowStageRun
 * @typedef {import('../../types/SellerConfig').SellerConfig} SellerConfig
 */

/**
 * @typedef {{
 *  '@type': 'Person' | 'Organization',
 *  identifier: string
 *  telephone: string,
 *  givenName: string,
 *  familyName: string,
 *  email: string,
 *  }} Customer
 *
 * @typedef {UnknownFlowStageType | BookRecipe | AnyFlowStageRun} FlowStageRunnable Something that can be run by the `describeRunAnd-` functions
 */

const { SELLER_CONFIG } = global;

const FlowStageUtils = {
  // # Utilities for FlowStage factory
  //
  // e.g. for C1FlowStage
  /**
   * Empty `getInput` arg to use for FlowStages which need no input.
   */
  emptyGetInput: () => ({}),

  /**
   * Create itValidationTestsFn that will work for flow stages whose output
   * inclues an HTTP response (`httpResponse`) whose body is an OpenActive item.
   *
   * Runs sharedValidationTests.shouldBeValidResponse() against the response.
   *
   * @param {BaseLoggerType} logger
   * @param {object} validationSpec
   * @param {string} validationSpec.name Name to use for tests generated by
   *   validation checks.
   * @param {ValidationMode} validationSpec.validationMode
   */
  simpleValidationTests(logger, { name, validationMode }) {
    return (/** @type {FlowStageTypeWithHttpResponseOutput} */ flowStage) => {
      sharedValidationTests.shouldBeValidResponse(
        () => flowStage.getOutput().httpResponse,
        name,
        logger,
        {
          validationMode,
        },
      );
    };
  },

  /**
   * No-op test to use for validation tests or success checks if there are none. This is preferable to including no
   * tests because jest will not include describe(..) blocks in its report when there are no inner it(..) blocks,
   * which leads to confusing test logs.
   */
  createNoOpTest() {
    return () => {
      it('noop', () => { });
    };
  },

  /**
   * Create itSuccessChecksFn that will just check that a FlowStage's result
   * has an HTTP XXX status (e.g. 204).
   *
   * This only works for FlowStages whose result is just an HTTP response.
   *
   * @param {number} expectedStatus
   */
  simpleHttpXXXSuccessChecks(expectedStatus) {
    return (/** @type {FlowStageTypeWithHttpResponseOutput} */ flowStage) => {
      it(`should return ${expectedStatus} on success`, () => {
        chakram.expect(flowStage.getOutput().httpResponse).to.have.status(expectedStatus);
      });
    };
  },

  /**
   * Create itSuccessChecksFn that will just check that a FlowStage's result
   * has an HTTP 200 status.
   *
   * This only works for FlowStages whose result is just an HTTP response.
   */
  simpleHttp200SuccessChecks() {
    return FlowStageUtils.simpleHttpXXXSuccessChecks(200);
  },

  /**
   * Create itSuccessChecksFn that will just check that a FlowStage's result
   * has an HTTP 200 status.
   *
   * This only works for FlowStages whose result is just an HTTP response.
   */
  simpleHttp201SuccessChecks() {
    return FlowStageUtils.simpleHttpXXXSuccessChecks(201);
  },

  /**
   * Create itSuccessChecksFn that will just check that a FlowStage's result
   * has an HTTP 204 status.
   *
   * This only works for FlowStages whose result is just an HTTP response.
   */
  simpleHttp204SuccessChecks() {
    return FlowStageUtils.simpleHttpXXXSuccessChecks(204);
  },

  // # Utilities for test specs

  /**
   * @param {object} args
   * @param {RequestHelperType} args.requestHelper
   * @param {BaseLoggerType} args.logger
   * @param {OpportunityCriteria[]} args.orderItemCriteriaList
   * @param {string} [args.uuid]
   * @param {SellerConfig} [args.sellerConfig]
   * @param {Customer} [args.customer]
   */
  createDefaultFlowStageParams({ requestHelper, logger, uuid, sellerConfig, customer, orderItemCriteriaList }) {
    return {
      requestHelper,
      logger,
      uuid: uuid || generateUuid(),
      sellerConfig: sellerConfig || SELLER_CONFIG.primary,
      customer: customer || this.createRandomCustomerDetails(),
      orderItemCriteriaList,
    };
  },

  /**
   * Randomly generate customer details
   * @returns {Customer}
   */
  createRandomCustomerDetails() {
    return {
      '@type': 'Person',
      email: faker.internet.email(),
      telephone: faker.phone.phoneNumber(),
      givenName: faker.name.lastName(),
      familyName: faker.name.firstName(),
      identifier: faker.datatype.uuid(),
    };
  },

  /**
   * Uses reasonable values for:
   * - sellerConfig: derived from tax mode (if provided) - otherwise, primary seller
   * - requestHelper: A new one is created using the data present
   *
   * @param {object} args
   * @param {BaseLoggerType} args.logger
   * @param {OpportunityCriteria[]} args.orderItemCriteriaList
   * @param {string | null} [args.taxMode] If sellerConfig is not specified, it is derived from this
   * @param {SellerConfig} [args.sellerConfig]
   */
  createSimpleDefaultFlowStageParams({ logger, orderItemCriteriaList, taxMode = null, ...args }) {
    const sellerConfig = args.sellerConfig ?? (
      taxMode
        ? getSellerConfigWithTaxMode(taxMode)
        : SELLER_CONFIG.primary);
    const requestHelper = new RequestHelper(logger, sellerConfig);
    return FlowStageUtils.createDefaultFlowStageParams({
      requestHelper, logger, sellerConfig, orderItemCriteriaList,
    });
  },

  /**
   * Creates a `describe(..)` block in which:
   *
   * 1. Runs the flow stage in a `beforeAll(..)` block.
   * 2. (Depending on the value of `checks`) Runs success checks and validation checks of the response in `it(..)` blocks.
   * 3. Optionally runs extra tests.
   *
   * @param {object} checks
   * @param {boolean} checks.doCheckSuccess If true, success checks will be run
   * @param {boolean} checks.doCheckIsValid If true, validation will be run
   * @param {FlowStageRunnable} flowStageRunnable If this is a BookRecipe, or FlowStageRun
   *   all stages within will be checked for validity/success.
   *
   *   NOTE It is recommended to only use a BookRecipe when expecting success. If expecting failure,
   *   it is recommended to run only the first stage `describeRunAndRunChecks({ .. }, bookRecipe.firstStage)`.
   *   There is no point simulating approval if P was expected to fail.
   * @param {() => void} [itAdditionalTests] Additional tests which will
   *   be run after success and validation tests have run.
   *   These tests need to create `it(..)` blocks for each of the new tests.
   *   The tests will be run within the same `describe(..)` block as
   *   success/validation tests.
   */
  describeRunAndRunChecks(checks, flowStageRunnable, itAdditionalTests) {
    if (flowStageRunnable instanceof FlowStageRun) {
      const allStages = flowStageRunnable.getFlattenedStages();
      for (const stage of allStages.slice(0, -1)) {
        FlowStageUtils.describeRunAndRunChecks(checks, stage);
      }
      /* Only run additional tests on the last stage, so that all of the run will have occurred by the time
      the additional tests are run */
      FlowStageUtils.describeRunAndRunChecks(checks, last(allStages), itAdditionalTests);
      return;
    }
    if (flowStageRunnable instanceof BookRecipe) {
      /* TODO optimize: Make it possible to stop after P if P fails. If P fails, there's not going to be any
      approved items appearing in the feed - which means that the tests will time out.
      One option for achieving that:
      - Give OrderFeedUpdateAfterP's Flow Stage (which is an OrderFeedUpdateCollector) an optional `breakIf`
        arg. e.g. if you provide `breakIf: () => !isHttp2xxResponse(p.getOutput().httpResponse)`, then this stage
        can have some code in its run function like `if (breakIf()) { throw new Error('..'); }`
      */
      const allStages = flowStageRunnable.getStages();
      for (const stage of allStages.slice(0, -1)) {
        FlowStageUtils.describeRunAndRunChecks(checks, stage);
      }
      /* Only run additional tests on the last stage, so that all of the booking will have occurred by the time
      the additional tests are run */
      FlowStageUtils.describeRunAndRunChecks(checks, last(allStages), itAdditionalTests);
      return;
    }
    // It's a FlowStage
    if (!flowStageRunnable.shouldDescribeFlowStage()) {
      throw new Error(`describeRunAndCheckIsSuccessfulAndValid(..) cannot run on ${flowStageRunnable.getLoggableStageName()} as shouldDescribeFlowStage is false`);
    }
    describe(flowStageRunnable.testName, () => {
      flowStageRunnable.beforeSetup();

      if (checks.doCheckSuccess || flowStageRunnable.alwaysDoSuccessChecks()) {
        flowStageRunnable.itSuccessChecks();
      }
      if (checks.doCheckIsValid) {
        flowStageRunnable.itValidationTests();
      }

      if (itAdditionalTests) {
        itAdditionalTests();
      }
    });
  },

  /**
   * Creates a `describe(..)` block in which:
   *
   * 1. Runs the flow stage in a `beforeAll(..)` block.
   * 2. Runs success checks and validation checks of the response in `it(..)` blocks.
   * 3. Optionally runs extra tests.
   *
   * @param {FlowStageRunnable} flowStageOrBookRecipe If this is a BookRecipe or FlowStageRun,
   *   all stages within will be checked for validity/success.
   * @param {() => void} [itAdditionalTests] Additional tests which will
   *   be run after success and validation tests have run.
   *   These tests need to create `it(..)` blocks for each of the new tests.
   *   The tests will be run within the same `describe(..)` block as
   *   success/validation tests.
   */
  describeRunAndCheckIsSuccessfulAndValid(flowStageOrBookRecipe, itAdditionalTests) {
    return FlowStageUtils.describeRunAndRunChecks({ doCheckIsValid: true, doCheckSuccess: true }, flowStageOrBookRecipe, itAdditionalTests);
  },

  /**
   * Use for a FlowStage which is expected to return a (valid) error response.
   *
   * Creates a `describe(..)` block in which:
   *
   * 1. Runs the flow stage in a `beforeAll(..)` block.
   * 2. Runs validation checks of the response in `it(..)` blocks.
   *   NOTE: Success checks are not run
   * 3. Optionally runs extra tests.
   *
   * @param {FlowStageRunnable} flowStageOrBookRecipe If this is a BookRecipe or FlowStageRun,
   *   all stages within will be checked for validity.
   * @param {() => void} [itAdditionalTests] Additional tests which will
   *   be run after success and validation tests have run.
   *   These tests need to create `it(..)` blocks for each of the new tests.
   *   The tests will be run within the same `describe(..)` block as
   *   success/validation tests.
   */
  describeRunAndCheckIsValid(flowStageOrBookRecipe, itAdditionalTests) {
    return FlowStageUtils.describeRunAndRunChecks({ doCheckIsValid: true, doCheckSuccess: false }, flowStageOrBookRecipe, itAdditionalTests);
  },
};

module.exports = {
  FlowStageUtils,
};
