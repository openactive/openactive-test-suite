<head>
<style>
h3 {
  cursor: pointer;
}
h3:hover {
  color: #0056b3; /* Example color change on hover */
}

/* New styling for collapsed sections */
section.collapsed > *:not(h3) {
  display: none;
}

section {
  border: 1px solid #CCC;
  padding: 0.5em;
  margin-bottom: 1em;
}
</style>
</head>

<button id="collapseH3Button">Collapse All Sections</button>
<button id="showH3Button">Show All Sections</button>
<label><input type="checkbox" id="hideSuccessToggle" checked> Hide successful results</label>


# Summary of Test Suite Results for '{{ bookingServiceName }}'

Mode: **{{ useRandomOpportunitiesMode }}**

{{#if testResultSummary.numPassedTests}}✅ {{ testResultSummary.numPassedTests }} passing
{{/if}}{{#if testResultSummary.numFailedTests}}❌ {{ testResultSummary.numFailedTests }} failing
{{/if}}{{#if testResultSummary.numPendingTests}}– {{ testResultSummary.numPendingTests }} pending
{{/if}}

{{#if missingOpportunityDataSummary}}

## ❌ Missing Opportunity Data

Some of the tests failed because there were not enough opportunities in the booking system under test that matched the required [criteria](https://github.com/openactive/openactive-test-suite/blob/master/packages/openactive-integration-tests/test/features/README.md).

This only happens when using [Random Mode](https://developer.openactive.io/open-booking-api/test-suite#random-mode) as opposed to [Controlled Mode](https://developer.openactive.io/open-booking-api/test-suite#controlled-mode).

In order to pass these tests, please increase the number of opportunities in the Booking System. Make sure that there are many opportunities available that match each criteria.

You can use [test-data-generator](https://github.com/openactive/openactive-test-suite/tree/master/packages/openactive-integration-tests/test-data-generator) to get a specification of how much of each type of opportunity you need to generate.

If any of these criteria are not relevant to your Booking System, you may need to remove the relevant feature from your Test Suite configuration (See [`implementedFeatures`](https://github.com/openactive/openactive-test-suite/tree/master/packages/openactive-integration-tests#implementedfeatures)).

### Results

This is a list of the criteria, opportunity type, etc for which no opportunities
were found, that also includes a list of which tests failed as a result:

{{!-- This is rendered to HTML as the markdown->HTML renderer was creating <p>s
  for each root list item, which resulted in overlarge margins --}}
<ul>
  {{#each missingOpportunityDataSummary}}

  <li>
    ❌️ Missing Criteria: <strong><a href="https://openactive.io/test-interface#{{@key}}">{{@key}}</a></strong>
    <ul>
      <li><a href="https://developer.openactive.io/publishing-data/data-feeds/types-of-feed#event-relationship-overview">Opportunity Types</a>: {{#each (lookup . "opportunityTypes")}}<strong>{{.}}</strong>{{#unless @last}}, {{/unless}}{{/each}}</li>
      <li><a href="https://openactive.io/open-booking-api/EditorsDraft/1.0CR3/#booking-flows">Booking Flows</a>: {{#each (lookup . "bookingFlows")}}<strong>{{.}}</strong>{{#unless @last}}, {{/unless}}{{/each}}</li>
      <li>Sellers: {{#each (lookup . "sellerIds")}}<code>{{.}}</code>{{#unless @last}}, {{/unless}}{{/each}}</li>
      <li>Tests failing as a result: {{lookup . "numTestsFailing"}}</li>
    </ul>
  </li>

  {{/each}}
</ul>

{{/if}}

## Tests

{{#eachSorted opportunityTypeGroups }}

<section>
  <h3>▼ {{{ opportunityTypeName }}}</h3>  {{!-- Indicate expanded by default --}}

  <ul>
    {{#each featureGroups }}
    <li class="feature-group" data-status="{{overallStatus}}">
      {{{ validationIcon overallStatus }}} {{{ featureName }}} ({{implementedDisplayLabel}})
      <ul>
        {{#each loggers}}
        <li class="logger" data-status="{{overallStatus}}">
          {{{ validationIcon overallStatus }}} <a href="{{{ htmlLocalPath }}}">{{{ suiteName }}}</a>: ({{{ numFailed }}} failures, {{{ numWarnings }}} warnings, {{{ numSuggestions }}} suggestions, {{{ numPassed }}} passes)
        </li>
        {{/each}}
      </ul>
    </li>
    {{/each}}
  </ul>
  <div class="all-tests-passing" style="display: none;">
    <ul>
      <li>✅ All tests passing</li>
    </ul>
  </div>
</section>

{{/eachSorted}}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script>hljs.highlightAll();</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  // Toggle sections on H3 click
  document.querySelectorAll("section h3").forEach(function(heading) {
    heading.addEventListener("click", function() {
      const section = heading.closest("section");
      const collapsed = section.classList.toggle("collapsed");
      // Update the emoji to reflect current state
      heading.textContent = (collapsed ? "► " : "▼ ") + heading.textContent.slice(2);
    });
  });

  // Collapse All Sections
  const collapseAllBtn = document.getElementById("collapseH3Button");
  collapseAllBtn.addEventListener("click", function() {
    document.querySelectorAll("section").forEach(function(section) {
      if (!section.classList.contains("collapsed")) {
        section.classList.add("collapsed");
        const heading = section.querySelector("h3");
        heading.textContent = "► " + heading.textContent.slice(2);
      }
    });
  });

  // Show All Sections
  const showAllBtn = document.getElementById("showH3Button");
  showAllBtn.addEventListener("click", function() {
    document.querySelectorAll("section").forEach(function(section) {
      if (section.classList.contains("collapsed")) {
        section.classList.remove("collapsed");
        const heading = section.querySelector("h3");
        heading.textContent = "▼ " + heading.textContent.slice(2);
      }
    });
  });

  // Hide successful results toggle
  const hideSuccessToggle = document.getElementById("hideSuccessToggle");
  const updateVisibility = function() {
    const hideSuccess = hideSuccessToggle.checked;
    document.querySelectorAll(".feature-group, .logger").forEach(function(el) {
      const status = el.dataset.status || "";
      if (hideSuccess && status !== "failed") {
        el.style.display = "none";
      } else {
        el.style.display = "";
      }
    });

    // Show or hide "✅ All tests passing" if no feature groups are visible
    document.querySelectorAll("section").forEach(function(sec) {
      const featureGroups = Array.from(sec.querySelectorAll(".feature-group"));
      const message = sec.querySelector(".all-tests-passing");
      if (message) {
        // If any feature group is visible, hide the message
        const anyVisible = featureGroups.some(fg => fg.style.display !== "none");
        message.style.display = anyVisible ? "none" : "";
      }
    });
  };
  hideSuccessToggle.addEventListener("change", updateVisibility);

  // Initialize visibility on page load
  updateVisibility();

  // Collapse passing sections if there is at least one failing test
  const collapsePassingSectionsIfAnyFailing = function() {
    // Check if there's any failing test in the entire document
    const anyFailing = document.querySelector(".feature-group[data-status='failed'], .logger[data-status='failed']");

    // If there's a failing test, collapse any section that does NOT contain a failing feature-group/logger
    if (anyFailing) {
      document.querySelectorAll("section").forEach(function(section) {
        const hasFailingChild = section.querySelector(".feature-group[data-status='failed'], .logger[data-status='failed']");
        if (!hasFailingChild && !section.classList.contains("collapsed")) {
          section.classList.add("collapsed");
          const heading = section.querySelector("h3");
          if (heading && heading.textContent.startsWith("▼ ")) {
            heading.textContent = "► " + heading.textContent.slice(2);
          }
        }
      });
    }
  };

  // Apply the collapse logic right after the first visibility update
  collapsePassingSectionsIfAnyFailing();
});
</script>
